package com.faacets
package qalg

import spire.algebra.{Field, Order, InnerProductSpace, VectorSpace, Monoid}
import spire.math.{Rational, SafeLong, lcm, gcd}
import spire.implicits._

/** Base trait for mutable or immutable vectors. */
abstract class QVectorBase[V <: QVectorBase[V, M], M <: QMatrixBase[M, V]] extends GenQVector with QTensorBase[V] {
  lhs: V =>

  def mapElements(f: Rational => Rational): V = factory.tabulate(length)(i => f(this(i)))

  def mapWithIndex(f: (Int, Rational) => Rational): V = factory.tabulate(length)( i => f(i, this(i)))

  /** Returns a row QMatrix containing a copy of this vector elements. */
  def toRowQMatrix: M = matrixFactory.tabulate(1, length)( (r,c) => this(c) )

  /** Returns a column QMatrix containing a copy of this vector elements. */
  def toColQMatrix: M = matrixFactory.tabulate(length, 1)( (r,c) => this(r) )

  /** Transpose of that vector, i.e. vector as row matrix. */
  def t: M = toRowQMatrix

  def integerCoefficients: (Array[BigInt], BigInt) = {
    val array = toArray
    val commonDenominator = (BigInt(1) /: array)( (lSoFar, el) => spire.math.lcm(lSoFar, el.denominator) )
    val coeffsArray = array.map( r => r.numerator * (commonDenominator/r.denominator) )
    (coeffsArray, commonDenominator)
  }

  def longCoefficients: (Array[Long], Long) = {
    val (coeffsArray, commonDenominator) = integerCoefficients
    if (coeffsArray.exists(!_.isValidLong))
      throw new IllegalArgumentException("Coefficients do not fit into a long.")
    if (!commonDenominator.isValidLong)
      throw new IllegalArgumentException("Denominator does not fit into a long.")
    (coeffsArray.map(_.longValue), commonDenominator.longValue)
  }
}

class QVectorBaseOrder[V <: QVectorBase[V, _]] extends Order[V] {
  def compare(u: V, v: V): Int = {
    assert(u.length == v.length)
    for(i <- 0 until u.length) {
      val compareValue = Rational.RationalAlgebra.compare(u(i), v(i))
      if (compareValue != 0)
        return compareValue
    }
    0
  }
}
